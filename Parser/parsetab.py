
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CREG FLOAT GATE_CX GATE_H GATE_T GATE_TDG GATE_X IDENTIFIER INCLUDE LBRACKET NUMBER OPENQASM QREG RBRACKET SEMICOLON STRINGprogram : OPENQASM FLOAT SEMICOLON include qreg creg statementsinclude : INCLUDE STRING SEMICOLONqreg : QREG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLONcreg : CREG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLONstatements : statement statements\n                  | statement : GATE_H IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON\n                 | GATE_X IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON\n                 | GATE_T IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON\n                 | GATE_TDG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON\n                 | GATE_CX IDENTIFIER LBRACKET NUMBER RBRACKET COMMA IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON'
    
_lr_action_items = {'OPENQASM':([0,],[2,]),'$end':([1,10,14,15,23,50,51,52,53,54,60,],[0,-6,-1,-6,-5,-4,-7,-8,-9,-10,-11,]),'FLOAT':([2,],[3,]),'SEMICOLON':([3,9,37,43,45,46,47,48,59,],[4,13,44,50,51,52,53,54,60,]),'INCLUDE':([4,],[6,]),'QREG':([5,13,],[8,-2,]),'STRING':([6,],[9,]),'CREG':([7,44,],[11,-3,]),'IDENTIFIER':([8,11,16,17,18,19,20,55,],[12,21,24,25,26,27,28,56,]),'GATE_H':([10,15,50,51,52,53,54,60,],[16,16,-4,-7,-8,-9,-10,-11,]),'GATE_X':([10,15,50,51,52,53,54,60,],[17,17,-4,-7,-8,-9,-10,-11,]),'GATE_T':([10,15,50,51,52,53,54,60,],[18,18,-4,-7,-8,-9,-10,-11,]),'GATE_TDG':([10,15,50,51,52,53,54,60,],[19,19,-4,-7,-8,-9,-10,-11,]),'GATE_CX':([10,15,50,51,52,53,54,60,],[20,20,-4,-7,-8,-9,-10,-11,]),'LBRACKET':([12,21,24,25,26,27,28,56,],[22,29,31,32,33,34,35,57,]),'NUMBER':([22,29,31,32,33,34,35,57,],[30,36,38,39,40,41,42,58,]),'RBRACKET':([30,36,38,39,40,41,42,58,],[37,43,45,46,47,48,49,59,]),'COMMA':([49,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'include':([4,],[5,]),'qreg':([5,],[7,]),'creg':([7,],[10,]),'statements':([10,15,],[14,23,]),'statement':([10,15,],[15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPENQASM FLOAT SEMICOLON include qreg creg statements','program',7,'p_program','parser.py',8),
  ('include -> INCLUDE STRING SEMICOLON','include',3,'p_include','parser.py',25),
  ('qreg -> QREG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','qreg',6,'p_qreg','parser.py',29),
  ('creg -> CREG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','creg',6,'p_creg','parser.py',33),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',37),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',38),
  ('statement -> GATE_H IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','statement',6,'p_statement','parser.py',43),
  ('statement -> GATE_X IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','statement',6,'p_statement','parser.py',44),
  ('statement -> GATE_T IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','statement',6,'p_statement','parser.py',45),
  ('statement -> GATE_TDG IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','statement',6,'p_statement','parser.py',46),
  ('statement -> GATE_CX IDENTIFIER LBRACKET NUMBER RBRACKET COMMA IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON','statement',11,'p_statement','parser.py',47),
]
